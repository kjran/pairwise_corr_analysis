clear;
%Enter recoded position data as matrix D__  --Enter as Each row is a different sequence,
%Each column is a nucleotide position. 0 is A at that position, 1 is a G.

% D__ = []

[n_j,n_k] = size(D__); %<-- n_j (presumably) independent trials, each consisting of n_k binary channels. ;

% Enter reported frequencies for each position as a single row p_
% p_ = [] ; %<-- published frequencies ;
p_ = p_/100; %<-- convert to fraction. ;
tmp_index_ = efind(p_>0.5); %<-- find mostly ones. ;
D__(:,1+tmp_index_) = 1 - D__(:,1+tmp_index_); %<-- flip these columns. ;
p_(1+tmp_index_) = 1 - p_(1+tmp_index_); %<-- flip these probabilities. ;
q_ = 1 - p_ ; %<-- p_ is the probability of being on, q_ is the probability of being off. ;

%%%%%%%%;
% First define the null hypothesis H0: ;
% H0 = assumption that the n_j trials are each drawn independently from one another, ;
% and that, within each trial, each of the n_k channels are each drawn independently from one another, ;
% with channel-nk drawn as a bernoulli-random variables with probability p_(1+nk);
%%%%%%%%;

%%%%%%%%;
% Question 0: ;
% First check to see if the published rates p_ are consistent with the observed (empirical rates) mean(D__,1). ;
% To do this, we first calculate the log-likelihood ll_D of observing the given mean(D__,1). ;
%%%%%%%%;
ll_D = 0;
for nk=0:n_k-1;
n_0on = sum(D__(:,1+nk));
n_off = n_j - n_0on;
ll_D = ll_D + lnchoosek(n_j,n_0on) + n_0on*log(p_(1+nk)) + n_off*log(q_(1+nk)) ; %<-- log of binomial term. ;
end;%for nk=0:n_k-1;
%%%%%%%%;
% vectorized version. ;
%%%%%%%%;
lp_ = log(p_); lq_ = log(q_);
n_0on_ = sum(D__,1); n_off_ = n_j - n_0on_;
ll_D = sum( lnchoosek(n_j,n_0on_) + n_0on_.*lp_ + n_off_.*lq_ ) ;
%%%%%%%%;
% Now we estimate the probability p that a sample drawn from H0 will have a more extreme log-likelhood. ;
% This probability p will be the p-value for H0. ;
%%%%%%%%;
n_iteration = 1024*8;
ll_D_ = zeros(n_iteration,1);
ep__ = ones(n_j,1)*p_;
for niteration=0:n_iteration-1;
tmp_D__ = rand(n_j,n_k)<ep__;
tmp_n_0on_ = sum(tmp_D__,1); tmp_n_off_ = n_j - tmp_n_0on_;
tmp_ll_D = sum( lnchoosek(n_j,tmp_n_0on_) + tmp_n_0on_.*lp_ + tmp_n_off_.*lq_ ) ;
ll_D_(1+niteration) = tmp_ll_D;
end;%for niteration=0:n_iteration-1;
pval = sum(ll_D_<ll_D)/numel(ll_D_);
disp(sprintf(' %% all channels combined: pval = %0.6f',pval));
%%%%%%%%;
% Question 1: ;
% Now check each channel one by one. ;
% These p-values are exact. ;
%%%%%%%%;
lp_ = log(p_); lq_ = log(q_);
n_0on_ = sum(D__,1); n_off_ = n_j - n_0on_;
ll_D_ = lnchoosek(n_j,n_0on_) + n_0on_.*lp_ + n_off_.*lq_ ;
ll_D__ = zeros(n_j+1,n_k);
for nk=0:n_k-1;
for nj=0:n_j+1-1;
tmp_n_0on = nj; tmp_n_off = n_j-tmp_n_0on;
ll_D__(1+nj,1+nk) = lnchoosek(n_j,tmp_n_0on) + tmp_n_0on.*lp_(1+nk) + tmp_n_off.*lq_(1+nk) ;
end;%for nj=0:n_j+1-1;
end;%for nk=0:n_k-1;
pval_ = zeros(n_k,1);
lpval_ = zeros(n_k,1);
for nk=0:n_k-1;
pval_(1+nk) = sum(exp(ll_D__(1+efind(ll_D__(:,1+nk)<ll_D_(1+nk)),1+nk)));
lpval_(1+nk) = log(pval_(1+nk));
disp(sprintf(' %% channel %.2d/%.2d: pval %0.6f, log(pval) = %0.6f',nk,n_k,pval_(1+nk),lpval_(1+nk)));
end;%for nk=0:n_k-1;
%%%%%%%%;

%%%%%%%%;
% If empirical frequencies are significantly different from the published frequencies, redefine the frequencies by using the empirical frequences. ;
% Also eliminate empty channels;
%%%%%%%%;
%%%%%%%%;
id_channel_ = 1:n_k;
D__ = D__(:,1+setdiff(0:n_k-1,[0,1]));
id_channel_ = id_channel_(1+setdiff(0:n_k-1,[0,1])); % <-- eliminate empty channels here
[n_j,n_k] = size(D__);
p_ = mean(D__,1);
q_ = 1 - p_;
%%%%%%%%;

%%%%%%%%;
% Question 2: ;
% Now repeat question 0 using the empirical frequencies. ;
%%%%%%%%;
ll_D = 0;
for nk=0:n_k-1;
n_0on = sum(D__(:,1+nk));
n_off = n_j - n_0on;
ll_D = ll_D + lnchoosek(n_j,n_0on) + n_0on*log(p_(1+nk)) + n_off*log(q_(1+nk)) ; %<-- log of binomial term. ;
end;%for nk=0:n_k-1;
%%%%%%%%;
% vectorized version. ;
%%%%%%%%;
lp_ = log(p_); lq_ = log(q_);
n_0on_ = sum(D__,1); n_off_ = n_j - n_0on_;
ll_D = sum( lnchoosek(n_j,n_0on_) + n_0on_.*lp_ + n_off_.*lq_ ) ;
%%%%%%%%;
% Now we estimate the probability p that a sample drawn from H0 will have a more extreme log-likelhood. ;
% This probability p will be the p-value for H0. ;
%%%%%%%%;
n_iteration = 1024*8;
ll_D_ = zeros(n_iteration,1);
ep__ = ones(n_j,1)*p_;
for niteration=0:n_iteration-1;
tmp_D__ = rand(n_j,n_k)<ep__;
tmp_n_0on_ = sum(tmp_D__,1); tmp_n_off_ = n_j - tmp_n_0on_;
tmp_ll_D = sum( lnchoosek(n_j,tmp_n_0on_) + tmp_n_0on_.*lp_ + tmp_n_off_.*lq_ ) ;
ll_D_(1+niteration) = tmp_ll_D;
end;%for niteration=0:n_iteration-1;
pval = sum(ll_D_<ll_D)/numel(ll_D_);
disp(sprintf(' %% all channels combined: pval = %0.6f',pval));
%%%%%%%%;
% Question 3: ;
% Now check each channel one by one. ;
% These p-values are exact. ;
%%%%%%%%;
lp_ = log(p_); lq_ = log(q_);
n_0on_ = sum(D__,1); n_off_ = n_j - n_0on_;
ll_D_ = lnchoosek(n_j,n_0on_) + n_0on_.*lp_ + n_off_.*lq_ ;
ll_D__ = zeros(n_j+1,n_k);
for nk=0:n_k-1;
for nj=0:n_j+1-1;
tmp_n_0on = nj; tmp_n_off = n_j-tmp_n_0on;
ll_D__(1+nj,1+nk) = lnchoosek(n_j,tmp_n_0on) + tmp_n_0on.*lp_(1+nk) + tmp_n_off.*lq_(1+nk) ;
end;%for nj=0:n_j+1-1;
end;%for nk=0:n_k-1;
pval_ = zeros(n_k,1);
lpval_ = zeros(n_k,1);
for nk=0:n_k-1;
pval_(1+nk) = sum(exp(ll_D__(1+efind(ll_D__(:,1+nk)<ll_D_(1+nk)),1+nk)));
lpval_(1+nk) = log(pval_(1+nk));
disp(sprintf(' %% channel %.2d/%.2d: pval %0.6f, log(pval) = %0.6f',nk,n_k,pval_(1+nk),lpval_(1+nk)));
end;%for nk=0:n_k-1;
%%%%%%%%;

%%%%%%%%;
% Now measure the p-value for each of the channel-pairs. ;
%%%%%%%%;
n_A = ceil(1.25*(n_j+1)^3/6); %<-- upper bound on total number of permutations. ;
c11_ = zeros(n_A,1); %<-- both 0on. ;
c01_ = zeros(n_A,1); %<-- latter 0on. ;
c10_ = zeros(n_A,1); %<-- former 0on. ;
c00_ = zeros(n_A,1); %<-- both off. ;
na=0;
for nc11=0:n_j+1-1;
for nc01=0:n_j+1-1-nc11;
for nc10=0:n_j+1-1-nc11-nc01;
nc00 = n_j - (nc11 + nc01 + nc10) ;
c11_(1+na) = nc11;
c01_(1+na) = nc01;
c10_(1+na) = nc10;
c00_(1+na) = nc00;
na=na+1;
end;%for nc10=0:n_j+1-1;
end;%for nc01=0:n_j+1-1;
end;%for nc11=0:n_j+1-1;
n_A = na;
c11_ = c11_(1:n_A);
c01_ = c01_(1:n_A);
c10_ = c10_(1:n_A);
c00_ = c00_(1:n_A);
lM_ = lfactorial(n_j) - lfactorial(c11_) - lfactorial(c01_) - lfactorial(c10_) - lfactorial(c00_); %<-- list of log(multinomial) coefficients. ;
%%%%%%%%;
test_pval__ = zeros(n_k,n_k);
test_lpval__ = zeros(n_k,n_k);
for nk0=0:n_k-1;
lp0 = log(p_(1+nk0)); lq0 = log(q_(1+nk0));
for nk1=0:n_k-1;
lp1 = log(p_(1+nk1)); lq1 = log(q_(1+nk1));
test_pval__(1+nk0,1+nk1) = sum(exp(lM_ + (c11_ + c10_).*lp0 + (c01_ + c00_).*lq0 + (c11_ + c01_).*lp1 + (c10_ + c00_).*lq1)); %<-- p-value. ;
test_lpval__(1+nk0,1+nk1) = log(test_pval__(1+nk0,1+nk1));
end;%for nk1=0:n_k-1;
end;%for nk0=0:n_k-1;
%%%%%%%%;
%%%%%%%%;
% now calculate pval__ for the actual observed correlations. ;
%%%%%%%%;
true_pval__ = zeros(n_k,n_k);
true_lpval__ = zeros(n_k,n_k);
for nk0=0:n_k-1;
for nk1=0:n_k-1;
if (nk0==nk1);
true_pval__(1+nk0,1+nk1) = 1.0;
true_lpval__(1+nk0,1+nk1) = 0.0;
end;%if (nk0==nk1);
if (nk0~=nk1);
lp0 = log(p_(1+nk0)); lq0 = log(q_(1+nk0));
lp1 = log(p_(1+nk1)); lq1 = log(q_(1+nk1));
tmp_D__ = D__(:,1+[nk0,nk1]); %<-- extract channels nk0 and nk1. ;
tmp_DD__ = transpose(tmp_D__)*tmp_D__;
tmp_c11 = tmp_DD__(1,2); assert(tmp_DD__(1,2)==tmp_DD__(2,1));
tmp_c10 = tmp_DD__(1,1)-tmp_c11;
tmp_c01 = tmp_DD__(2,2)-tmp_c11;
tmp_c00 = n_j - (tmp_c11 + tmp_c01 + tmp_c10);
tmp_lM = lfactorial(n_j) - lfactorial(tmp_c11) - lfactorial(tmp_c01) - lfactorial(tmp_c10) - lfactorial(tmp_c00);
tmp_ll = tmp_lM + (tmp_c11 + tmp_c10)*lp0 + (tmp_c01 + tmp_c00)*lq0 + (tmp_c11 + tmp_c01)*lp1 + (tmp_c10 + tmp_c00)*lq1;
tmp_ll_ = lM_ + (c11_ + c10_).*lp0 + (c01_ + c00_).*lq0 + (c11_ + c01_).*lp1 + (c10_ + c00_).*lq1;
tmp_index = efind(tmp_ll_<tmp_ll);
true_pval__(1+nk0,1+nk1) = sum(exp(tmp_ll_(1+tmp_index))); %<-- p-value. ;
true_lpval__(1+nk0,1+nk1) = log(true_pval__(1+nk0,1+nk1));
end;%if (nk0~=nk1);
end;%for nk1=0:n_k-1;
end;%for nk0=0:n_k-1;
%%%%%%%%;
% Now print out a figure. ;
%%%%%%%%;
figure(1);clf;

imagesc(-true_lpval__,[0,25]);
set(gca,'XTick',1:n_k,'XTickLabel',id_channel_);
set(gca,'YTick',1:n_k,'YTickLabel',id_channel_);
xlabel('channel id');
ylabel('channel id');
axis image;
title('p-value of channel-correlation');
cb = colorbar(); cb.Title.String = 'log(p-value)';

fname_fig = sprintf('%s/channel_correlation_FIGA');
print('-depsc',sprintf('%s.eps',fname_fig));
print('-djpeg',sprintf('%s.jpg',fname_fig));
%%%%%%%%;
% print out to screen. ;
%%%%%%%%;
disp(num2str(true_pval__,25));
